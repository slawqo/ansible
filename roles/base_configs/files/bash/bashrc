# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# don't put duplicate lines in the history. See bash(1) for more options
# ... or force ignoredups and ignorespace
HISTCONTROL=ignoredups:ignorespace

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

if [ "$TERM" == "xterm-termite" ]; then
    TERM="xterm-color"
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac


# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
#     PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
     PS1='${debian_chroot:+($debian_chroot)}\[\033[01;34m\][\t] \[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;31m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi

export LESS_TERMCAP_mb=$'\E[01;31m'
export LESS_TERMCAP_md=$'\E[01;31m'
export LESS_TERMCAP_me=$'\E[0m'
export LESS_TERMCAP_se=$'\E[0m'
export LESS_TERMCAP_so=$'\E[01;44;33m'
export LESS_TERMCAP_ue=$'\E[0m'
export LESS_TERMCAP_us=$'\E[01;32m'

export PATH="/usr/local/bin:/usr/local/sbin:~/bin:~/.usr/local/bin:${PATH}"

export EDITOR="vim"

[ -f ~/.fzf.bash ] && source ~/.fzf.bash

###############################
#### Some useful functions ####
###############################

function wait_for_offlineimap_finish {
    print_msg=0
    while true; do
        ps aux | grep [o]fflineimap -q
        if [ $? -ne 0 ]; then
            break
        fi
        if [ $print_msg -eq 0 ]; then
            echo "Offlineimap is running. Waiting for finish..."
        fi
        print_msg=1
        sleep 5
    done
}

# mount and umount block devices:
function mount_dev {
    dev=/dev/$1
    /usr/bin/udisksctl mount -b $dev
}
function unmount_dev {
    dev=/dev/$1
    /usr/bin/udisksctl unmount -b $dev
}

function print_hints {
    echo "CTRL + U        – Cuts text up until the cursor."
    echo "CTRL + K        – Cuts text from the cursor until the end of the line"
    echo "CTRL + Y        – Pastes text"
    echo "CTRL + E        – Move cursor to end of line"
    echo "CTRL + A        – Move cursor to the beginning of the line"
    echo "ALT + F         – Jump forward to next space"
    echo "ALT + B         – Skip back to previous space"
    echo "ALT + Backspace – Delete previous word"
    echo "CTRL + W        – Cut word behind cursor"
    echo ""
}

function c() {
    cd "$@" && ls
}

function weather() {
    curl -H "Accept-Language: pl" wttr.in/$1
}

# On MacOS I need such workaround for pass to have working polish chars
function pass() {
    orig_ctype=$LC_CTYPE
    orig_lang=$LANG
    PASS=$(which pass)
    LC_CTYPE=C && LANG=C
    $PASS "$@"
    LC_CTYPE=$orig_ctype&& LANG=$orig_lang
}

### Linux utils aliases ##########3
alias ls='ls -G'
alias h='print_hints'

alias ww="weather Wroclaw"

### At the end do some stuff:
print_hints
